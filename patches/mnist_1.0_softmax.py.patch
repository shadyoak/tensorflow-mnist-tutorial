--- original/mnist_1.0_softmax.py
+++ modified/mnist_1.0_softmax.py
@@ -78,7 +78,7 @@
 allbiases = tf.reshape(b, [-1])
 I = tensorflowvisu.tf_format_mnist_images(X, Y, Y_)  # assembles 10x10 images by default
 It = tensorflowvisu.tf_format_mnist_images(X, Y, Y_, 1000, lines=25)  # 1000 images on 25 lines
-datavis = tensorflowvisu.MnistDataVis()
+#datavis = tensorflowvisu.MnistDataVis()
 
 # init
 init = tf.global_variables_initializer()
@@ -95,28 +95,28 @@
     # compute training values for visualisation
     if update_train_data:
         a, c, im, w, b = sess.run([accuracy, cross_entropy, I, allweights, allbiases], feed_dict={X: batch_X, Y_: batch_Y})
-        datavis.append_training_curves_data(i, a, c)
-        datavis.append_data_histograms(i, w, b)
-        datavis.update_image1(im)
+#        datavis.append_training_curves_data(i, a, c)
+#        datavis.append_data_histograms(i, w, b)
+#        datavis.update_image1(im)
         print(str(i) + ": accuracy:" + str(a) + " loss: " + str(c))
 
     # compute test values for visualisation
     if update_test_data:
         a, c, im = sess.run([accuracy, cross_entropy, It], feed_dict={X: mnist.test.images, Y_: mnist.test.labels})
-        datavis.append_test_curves_data(i, a, c)
-        datavis.update_image2(im)
+#        datavis.append_test_curves_data(i, a, c)
+#        datavis.update_image2(im)
         print(str(i) + ": ********* epoch " + str(i*100//mnist.train.images.shape[0]+1) + " ********* test accuracy:" + str(a) + " test loss: " + str(c))
 
     # the backpropagation training step
     sess.run(train_step, feed_dict={X: batch_X, Y_: batch_Y})
 
 
-datavis.animate(training_step, iterations=2000+1, train_data_update_freq=10, test_data_update_freq=50, more_tests_at_start=True)
+#datavis.animate(training_step, iterations=2000+1, train_data_update_freq=10, test_data_update_freq=50, more_tests_at_start=True)
 
 # to save the animation as a movie, add save_movie=True as an argument to datavis.animate
 # to disable the visualisation use the following line instead of the datavis.animate line
-# for i in range(2000+1): training_step(i, i % 50 == 0, i % 10 == 0)
+for i in range(2000+1): training_step(i, i % 50 == 0, i % 10 == 0)
 
-print("max test accuracy: " + str(datavis.get_max_test_accuracy()))
+#print("max test accuracy: " + str(datavis.get_max_test_accuracy()))
 
 # final max test accuracy = 0.9268 (10K iterations). Accuracy should peak above 0.92 in the first 2000 iterations.
